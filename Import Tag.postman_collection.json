{
	"info": {
		"_postman_id": "16b3208e-e7e6-4c39-82d3-22947673adb0",
		"name": "Import Tag",
		"description": "All Calculated variables needed for this collection are stored as Collection Variables. These variables should not be manually changed since all IDs are set based on the responses from previous requests.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Create Property (pre-request)",
			"item": [
				{
					"name": "Clear Collection Variables",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Clear all old IDs in the collection",
									"pm.collectionVariables.clear();",
									"",
									"pm.test(\"Collection Variables cleared\", function () {",
									"  pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{IMS}}/ims/profile/v1",
							"host": [
								"{{IMS}}"
							],
							"path": [
								"ims",
								"profile",
								"v1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Company",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var resp = JSON.parse(responseBody);",
									"",
									"//evKey and evValue are the only values that should be changed in this script. Everything else is boilerplate.",
									"var evKey = \"companyID\";",
									"var evValue = resp.data[0].id;",
									"",
									"pm.collectionVariables.set(evKey, evValue);",
									"",
									"pm.test(evKey + \" is set to \" + evValue, function () {",
									"  pm.response.to.have.status(200);",
									"  pm.expect(evValue).to.be.not.empty;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "bearer {{access_token}}",
								"type": "text"
							},
							{
								"key": "x-api-key",
								"value": "{{CLIENT_ID}}",
								"type": "text"
							},
							{
								"key": "X-Gw-Ims-Org-Id",
								"value": "{{ORG_ID}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/vnd.api+json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api+json;revision=1",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{HOST}}/companies",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"companies"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Property",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var resp = JSON.parse(responseBody);",
									"",
									"//evKey and evValue are the only values that should be changed in this script. Everything else is boilerplate.",
									"var evKey = \"propID\";",
									"var evValue = resp.data.id;",
									"",
									"pm.collectionVariables.set(evKey, evValue);",
									"",
									"pm.test(evKey + \" is set to \" + evValue, function () {",
									"  pm.response.to.have.status(201);",
									"  pm.expect(evValue).to.be.not.empty;",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var now = new Date(Date.now());",
									"postman.setEnvironmentVariable(\"PROPERTY_UID\", now.toISOString());",
									"",
									"// var current = postman.getEnvironmentVariable(\"NAME_Index\");",
									"// if(current === undefined || current == -1){",
									"//   current = 1;",
									"// }",
									"// else {",
									"//     current = parseInt(current) + 1;",
									"// }",
									"",
									"// var propName = pm.iterationData.get(\"property_name\"+current);",
									"// if(propName === undefined && current != 1){",
									"//     postman.setEnvironmentVariable(\"propName\", \"No property_name\"+current+\" given in runner.data-file.json\");",
									"//     current = -1;",
									"// } else {",
									"//     postman.setEnvironmentVariable(\"propName\", propName);",
									"// }",
									"",
									"// postman.setEnvironmentVariable(\"NAME_Index\", current);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "bearer {{access_token}}",
								"type": "text"
							},
							{
								"key": "x-api-key",
								"value": "{{CLIENT_ID}}",
								"type": "text"
							},
							{
								"key": "X-Gw-Ims-Org-Id",
								"value": "{{ORG_ID}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/vnd.api+json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api+json;revision=1",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"data\": {\n    \"attributes\": {\n      \"name\": \"{{propName}} {{PROPERTY_UID}}\",\n      \"domains\": [\n        \"example.com\"\n      ],\n      \"platform\": \"web\"\n    },\n    \"type\": \"properties\"\n  }\n}"
						},
						"url": {
							"raw": "{{HOST}}/companies/{{companyID}}/properties",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"companies",
								"{{companyID}}",
								"properties"
							]
						},
						"description": "Property name is based on the local variable **propName**. This is set initially in the **Create Property folder > Pre-request script**.\n\n### Collection Variable Naming:\n\n*   `propID` - property ID of the created property"
					},
					"response": []
				},
				{
					"name": "Create Host",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var resp = JSON.parse(responseBody);",
									"",
									"//evKey and evValue are the only values that should be changed in this script. Everything else is boilerplate.",
									"var evKey = \"hostID\";",
									"var evValue = resp.data.id;",
									"",
									"pm.collectionVariables.set(evKey, evValue);",
									"",
									"pm.test(evKey + \" is set to \" + evValue, function () {",
									"  pm.response.to.have.status(201);",
									"  pm.expect(evValue).to.be.not.empty;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "bearer {{access_token}}",
								"type": "text"
							},
							{
								"key": "x-api-key",
								"value": "{{CLIENT_ID}}",
								"type": "text"
							},
							{
								"key": "X-Gw-Ims-Org-Id",
								"value": "{{ORG_ID}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/vnd.api+json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api+json;revision=1",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"data\": {\n        \"attributes\": {\n            \"name\": \"Managed by Adobe\",\n            \"type_of\": \"akamai\"\n        },\n        \"type\": \"hosts\"\n    }\n}"
						},
						"url": {
							"raw": "{{HOST}}/properties/{{propID}}/hosts",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"properties",
								"{{propID}}",
								"hosts"
							]
						},
						"description": "### Collection Variable Naming:\n\n*   `hostID` - Host ID of the host created within the property"
					},
					"response": []
				},
				{
					"name": "Create Dev Environment",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var resp = JSON.parse(responseBody);",
									"",
									"//evKey and evValue are the only values that should be changed in this script. Everything else is boilerplate.",
									"var environment = \"Dev\"",
									"var evKey = \"envID_\"+environment;",
									"var evValue = resp.data.id;",
									"var scriptCode = '<script src=\"'+resp.data.meta.script_sources[0].minified+'\" async></script>';",
									"pm.collectionVariables.set(\"env\"+environment+\"_script\", scriptCode);   ",
									"",
									"pm.collectionVariables.set(evKey, evValue);",
									"",
									"pm.test(evKey + \" is set to \" + evValue, function () {",
									"  pm.response.to.have.status(201);",
									"  pm.expect(evValue).to.be.not.empty;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "bearer {{access_token}}",
								"type": "text"
							},
							{
								"key": "x-api-key",
								"value": "{{CLIENT_ID}}",
								"type": "text"
							},
							{
								"key": "X-Gw-Ims-Org-Id",
								"value": "{{ORG_ID}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/vnd.api+json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api+json;revision=1",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"data\": {\n    \"attributes\": {\n      \"name\": \"Development\",\n      \"stage\": \"development\"\n    },\n    \"relationships\": {\n      \"host\": {\n        \"data\": {\n          \"id\": \"{{hostID}}\",\n          \"type\": \"hosts\"\n        }\n      }\n    },\n    \"type\": \"environments\"\n  }\n}"
						},
						"url": {
							"raw": "{{HOST}}/properties/{{propID}}/environments",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"properties",
								"{{propID}}",
								"environments"
							]
						},
						"description": "### Collection Variable Naming:\n\n*   `envID-Dev` - Dev ID created\n*   `envDev-script` - dev environment script that could be added/injected into a website"
					},
					"response": []
				},
				{
					"name": "Create Stage Environment",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var resp = JSON.parse(responseBody);",
									"",
									"//evKey and evValue are the only values that should be changed in this script. Everything else is boilerplate.",
									"var environment = \"Stage\"",
									"var evKey = \"envID_\"+environment;",
									"var evValue = resp.data.id;",
									"var scriptCode = '<script src=\"'+resp.data.meta.script_sources[0].minified+'\" async></script>';",
									"pm.collectionVariables.set(\"env\"+environment+\"_script\", scriptCode);   ",
									"",
									"pm.collectionVariables.set(evKey, evValue);",
									"",
									"pm.test(evKey + \" is set to \" + evValue, function () {",
									"  pm.response.to.have.status(201);",
									"  pm.expect(evValue).to.be.not.empty;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "bearer {{access_token}}",
								"type": "text"
							},
							{
								"key": "x-api-key",
								"value": "{{CLIENT_ID}}",
								"type": "text"
							},
							{
								"key": "X-Gw-Ims-Org-Id",
								"value": "{{ORG_ID}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/vnd.api+json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api+json;revision=1",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"data\": {\n    \"attributes\": {\n      \"name\": \"Staging\",\n      \"stage\": \"staging\"\n    },\n    \"relationships\": {\n      \"host\": {\n        \"data\": {\n          \"id\": \"{{hostID}}\",\n          \"type\": \"hosts\"\n        }\n      }\n    },\n    \"type\": \"environments\"\n  }\n}"
						},
						"url": {
							"raw": "{{HOST}}/properties/{{propID}}/environments",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"properties",
								"{{propID}}",
								"environments"
							]
						},
						"description": "### Collection Variable Naming:\n\n*   `envID-Stage` - Stage ID created\n*   `envStage-script` - Stage environment script that could be added/injected into a website"
					},
					"response": []
				},
				{
					"name": "Create Prod Environment",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var resp = JSON.parse(responseBody);",
									"",
									"//evKey and evValue are the only values that should be changed in this script. Everything else is boilerplate.",
									"var environment = \"Prod\"",
									"var evKey = \"envID_\"+environment;",
									"var evValue = resp.data.id;",
									"var scriptCode = '<script src=\"'+resp.data.meta.script_sources[0].minified+'\" async></script>';",
									"pm.collectionVariables.set(\"env\"+environment+\"_script\", scriptCode);   ",
									"",
									"pm.collectionVariables.set(evKey, evValue);",
									"",
									"pm.test(evKey + \" is set to \" + evValue, function () {",
									"  pm.response.to.have.status(201);",
									"  pm.expect(evValue).to.be.not.empty;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "bearer {{access_token}}",
								"type": "text"
							},
							{
								"key": "x-api-key",
								"value": "{{CLIENT_ID}}",
								"type": "text"
							},
							{
								"key": "X-Gw-Ims-Org-Id",
								"value": "{{ORG_ID}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/vnd.api+json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api+json;revision=1",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"data\": {\n    \"attributes\": {\n      \"name\": \"Production\",\n      \"stage\": \"production\"\n    },\n    \"relationships\": {\n      \"host\": {\n        \"data\": {\n          \"id\": \"{{hostID}}\",\n          \"type\": \"hosts\"\n        }\n      }\n    },\n    \"type\": \"environments\"\n  }\n}"
						},
						"url": {
							"raw": "{{HOST}}/properties/{{propID}}/environments",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"properties",
								"{{propID}}",
								"environments"
							]
						},
						"description": "### Collection Variable Naming:\n\n*   `envID-Prod` - Prod ID created\n*   `envProd-script` - prod environment script that could be added/injected into a website"
					},
					"response": []
				},
				{
					"name": "Save Extension Packages",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var res = JSON.parse(responseBody);",
									"",
									"extensionPackages = [];",
									"extensionPackages.push('core');",
									"extensionPackages.push('adobe-mcid'); //ECID",
									"extensionPackages.push('adobe-target-v2'); //Target v2",
									"extensionPackages.push('adobe-analytics');",
									"extensionPackages.push('gcoe-adobe-client-data-layer'); //ACDL",
									"extensionPackages.push('adobe-alloy'); //AEP",
									"extensionPackages.push('mapping-table'); //Event Mapping Table",
									"",
									"//Legacy Extentions",
									"extensionPackages.push('adobe-target');",
									"extensionPackages.push('adobe-contexthub');",
									"",
									"for(const packageName of extensionPackages){",
									"    function extension_package(data) {",
									"      return data.attributes.name === packageName;",
									"    }",
									"    package = res.data.find(extension_package);",
									"    if(package != null) pm.collectionVariables.set(\"extPackageID_\"+packageName, package.id);",
									"}",
									"",
									"pm.test(\"Extension Package IDs saved for: \"+ extensionPackages.toString(), function () {",
									"  pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "bearer {{access_token}}",
								"type": "text"
							},
							{
								"key": "x-api-key",
								"value": "{{CLIENT_ID}}",
								"type": "text"
							},
							{
								"key": "X-Gw-Ims-Org-Id",
								"value": "{{ORG_ID}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/vnd.api+json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api+json;revision=1",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{HOST}}/extension_packages?page[size]=999&sort=display_name&filter[platform]=EQ%20web,EQ%20null&max_availability=private",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"extension_packages"
							],
							"query": [
								{
									"key": "page[size]",
									"value": "999"
								},
								{
									"key": "sort",
									"value": "display_name"
								},
								{
									"key": "filter[platform]",
									"value": "EQ%20web,EQ%20null"
								},
								{
									"key": "max_availability",
									"value": "private"
								}
							]
						},
						"description": "### Extension Package IDs to be saved:\n\n*   ECID\n*   Target v2\n*   Analytics\n*   ACDL\n*   AEP\n*   Event Mapping Table\n*   Target v1.8\n*   Contexthub\n    \n\n### Collection Variable Naming:\n\n*   `extPackageID_< name >`\n    \n\nWhere `< name >` is derived from the response: `data.attributes.name`"
					},
					"response": []
				},
				{
					"name": "Save Core Extension",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var res = JSON.parse(responseBody);",
									"",
									"//evKey and evValue are the only values that should be changed in this script. Everything else is boilerplate.",
									"var name = \"core\";",
									"var evKey = \"extID_\"+name;",
									"var evValue = \"\";",
									"",
									"//Core",
									"function core_extension(data) {",
									"  return data.attributes.name === name;",
									"}",
									"extension = res.data.find(core_extension);",
									"if(extension != null) evValue = extension.id;",
									"",
									"pm.collectionVariables.set(evKey, evValue);",
									"",
									"pm.test(evKey + \" is set to \" + evValue, function () {",
									"  pm.response.to.have.status(200);",
									"  pm.expect(evValue).to.be.not.empty;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "bearer {{access_token}}",
								"type": "text"
							},
							{
								"key": "x-api-key",
								"value": "{{CLIENT_ID}}",
								"type": "text"
							},
							{
								"key": "X-Gw-Ims-Org-Id",
								"value": "{{ORG_ID}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/vnd.api+json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api+json;revision=1",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{HOST}}/properties/{{propID}}/extensions",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"properties",
								"{{propID}}",
								"extensions"
							]
						},
						"description": "By default, a tag property is created with the Core extension installed. Therefore the Core extension ID needs to be saved so it can be added to the Library for publishing later.\n\n### Collection Variable Naming:\n\n*   `extID-core` - Core extension ID"
					},
					"response": []
				}
			],
			"description": "# Setup\n\n1.  Go to the **Pre-request script** tab\n2.  Update the **propName** value to the desired property name.\n3.  Run this folder as a collection runner",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							"pm.variables.set(\"propName\",\"TechOps_Venia\");"
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Add Extentions (datafile)",
			"item": [
				{
					"name": "Add Extensions",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var attr = pm.iterationData.get('attributes');",
									"if(!attr.delegate_descriptor_id.includes('core')){",
									"    var resp = JSON.parse(responseBody);",
									"    ",
									"    //evKey and evValue are the only values that should be changed in this script. Everything else is boilerplate.",
									"    var name = resp.data.attributes.name.replace(/\\s+/g, '-');",
									"    var evKey = \"extID_\"+name;",
									"    var evValue = resp.data.id;",
									"",
									"    pm.collectionVariables.set(evKey, evValue);",
									"",
									"    pm.test(evKey + \" is set to \" + evValue, function () {",
									"    pm.response.to.have.status(201);",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var attr = pm.iterationData.get('attributes');",
									"",
									"var ddi = attr.delegate_descriptor_id.split(':')",
									"var id = ddi[0];",
									"",
									"//If the extension is Core, skip since it's auto added on property creation",
									"if(id == \"core\") {",
									"    postman.setNextRequest(this);",
									"};",
									"",
									"envVariables = pm.environment.toObject();",
									"// Find All environment variables with SETTINGS and then replace the attribute settings",
									"for (var envKey in envVariables){",
									"    if(envKey.includes(\"SETTINGS\")){",
									"        arr = envKey.split(\"_\");",
									"        key = arr[arr.length-1];",
									"        if(id === key){",
									"            newSettings = pm.environment.get(envKey);",
									"            // console.log(\"newSettings: \" + JSON.stringify(newSettings));",
									"            attr.settings = JSON.stringify(newSettings);",
									"            // console.log(\"UPDATED: \"+ JSON.stringify(attr));",
									"        }",
									"    }",
									"}",
									"",
									"pm.variables.set(\"datafile-attribute\", JSON.stringify(attr));",
									"pm.variables.set(\"datafile-id\", pm.collectionVariables.get('extPackageID_'+id));",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "bearer {{access_token}}",
								"type": "text"
							},
							{
								"key": "x-api-key",
								"value": "{{CLIENT_ID}}",
								"type": "text"
							},
							{
								"key": "X-Gw-Ims-Org-Id",
								"value": "{{ORG_ID}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/vnd.api+json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api+json;revision=1",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"data\": {\n    \"attributes\": {{datafile-attribute}},\n    \"relationships\": {\n      \"extension_package\": {\n        \"data\": {\n          \"id\": \"{{datafile-id}}\",\n          \"type\": \"extension_packages\"\n        }\n      }\n    },\n    \"type\": \"extensions\"\n  }\n}"
						},
						"url": {
							"raw": "{{HOST}}/properties/{{propID}}/extensions",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"properties",
								"{{propID}}",
								"extensions"
							]
						},
						"description": "### Collection Variable Naming:\n\n*   `extID_< name >` - ID of the data element created\n    \n\nWhere `< name >` is derived from the response: `data.attributes.name`"
					},
					"response": []
				}
			],
			"description": "This folder should be run as a collection runner with a datafile. The data file should be an array of extensions exported from another tag property:\n\n``` plaintext\nGET {{HOST}}properties/:propID/extensions\n\n```\n\nExample **extensions-datafile.json:**\n\n``` json\n[\n        {\n            \"id\": \"EX3c928e2340184002be0bbe0ab917f007\",\n            \"type\": \"extensions\",\n            \"attributes\": {\n                \"created_at\": \"2022-02-03T18:46:09.825Z\",\n                \"deleted_at\": null,\n                \"dirty\": false,\n                \"enabled\": true,\n                \"name\": \"adobe-mcid\",\n                \"published\": true,\n                \"published_at\": null,\n                \"revision_number\": 0,\n                \"updated_at\": \"2022-02-03T18:46:09.825Z\",\n                \"delegate_descriptor_id\": \"adobe-mcid::extensionConfiguration::config\",\n                \"display_name\": \"Experience Cloud ID Service\",\n                \"review_status\": \"unsubmitted\",\n                \"version\": \"5.3.1\",\n                \"settings\": \"{\\\"orgId\\\":\\\"test\\\"}\"\n            },\n            \"relationships\": {\n                \"libraries\": {\n                    \"links\": {\n                        \"related\": \"https://reactor.adobe.io/extensions/EX3c928e2340184002be0bbe0ab917f007/libraries\"\n                    }\n                },\n                \"revisions\": {\n                    \"links\": {\n                        \"related\": \"https://reactor.adobe.io/extensions/EX3c928e2340184002be0bbe0ab917f007/revisions\"\n                    }\n                },\n                \"notes\": {\n                    \"links\": {\n                        \"related\": \"https://reactor.adobe.io/extensions/EX3c928e2340184002be0bbe0ab917f007/notes\"\n                    }\n                },\n                \"property\": {\n                    \"links\": {\n                        \"related\": \"https://reactor.adobe.io/extensions/EX3c928e2340184002be0bbe0ab917f007/property\"\n                    },\n                    \"data\": {\n                        \"id\": \"PRe1347b49046a4ebab1bbea6c1dd2460e\",\n                        \"type\": \"properties\"\n                    }\n                },\n                \"origin\": {\n                    \"links\": {\n                        \"related\": \"https://reactor.adobe.io/extensions/EX3c928e2340184002be0bbe0ab917f007/origin\"\n                    },\n                    \"data\": {\n                        \"id\": \"EX3c928e2340184002be0bbe0ab917f007\",\n                        \"type\": \"extensions\"\n                    }\n                },\n                \"updated_with_extension_package\": {\n                    \"links\": {\n                        \"related\": \"https://reactor.adobe.io/extensions/EX3c928e2340184002be0bbe0ab917f007/updated_with_extension_package\"\n                    },\n                    \"data\": {\n                        \"id\": \"EP4413121ff4ce4a49869b12b0ea80c748\",\n                        \"type\": \"extension_packages\"\n                    }\n                },\n                \"extension_package\": {\n                    \"links\": {\n                        \"related\": \"https://reactor.adobe.io/extensions/EX3c928e2340184002be0bbe0ab917f007/extension_package\"\n                    },\n                    \"data\": {\n                        \"id\": \"EP4413121ff4ce4a49869b12b0ea80c748\",\n                        \"type\": \"extension_packages\"\n                    }\n                }\n            },\n            \"links\": {\n                \"property\": \"https://reactor.adobe.io/properties/PRe1347b49046a4ebab1bbea6c1dd2460e\",\n                \"origin\": \"https://reactor.adobe.io/extensions/EX3c928e2340184002be0bbe0ab917f007\",\n                \"self\": \"https://reactor.adobe.io/extensions/EX3c928e2340184002be0bbe0ab917f007\",\n                \"extension_package\": \"https://reactor.adobe.io/extension_packages/EP4413121ff4ce4a49869b12b0ea80c748\",\n                \"latest_extension_package\": \"https://reactor.adobe.io/extension_packages/EP4413121ff4ce4a49869b12b0ea80c748\"\n            },\n            \"meta\": {\n                \"latest_revision_number\": 1\n            }\n        },\n        {\n            \"id\": \"EX7c0a138c9e1245e8a2f2e35820a65a48\",\n            \"type\": \"extensions\",\n            \"attributes\": {\n                \"created_at\": \"2022-02-03T18:46:09.782Z\",\n                \"deleted_at\": null,\n                \"dirty\": false,\n                \"enabled\": true,\n                \"name\": \"adobe-target-v2\",\n                \"published\": true,\n                \"published_at\": null,\n                \"revision_number\": 0,\n                \"updated_at\": \"2022-02-03T18:46:09.782Z\",\n                \"delegate_descriptor_id\": \"adobe-target-v2::extensionConfiguration::config\",\n                \"display_name\": \"Adobe Target v2\",\n                \"review_status\": \"unsubmitted\",\n                \"version\": \"0.17.1\",\n                \"settings\": \"{\\\"targetSettings\\\":{\\\"enabled\\\":true,\\\"timeout\\\":3000,\\\"version\\\":\\\"2.7.0\\\",\\\"endpoint\\\":\\\"/rest/v1/delivery\\\",\\\"imsOrgId\\\":\\\"test\\\",\\\"clientCode\\\":\\\"adobevlab7us\\\",\\\"secureOnly\\\":false,\\\"serverState\\\":{},\\\"optinEnabled\\\":false,\\\"serverDomain\\\":\\\"adobevlab7us.tt.omtrdc.net\\\",\\\"urlSizeLimit\\\":2048,\\\"viewsEnabled\\\":true,\\\"optoutEnabled\\\":false,\\\"globalMboxName\\\":\\\"target-global-mbox\\\",\\\"bodyHiddenStyle\\\":\\\"body {opacity: 0}\\\",\\\"pageLoadEnabled\\\":true,\\\"analyticsLogging\\\":\\\"server_side\\\",\\\"deviceIdLifetime\\\":63244800000,\\\"bodyHidingEnabled\\\":true,\\\"decisioningMethod\\\":\\\"server-side\\\",\\\"sessionIdLifetime\\\":1860000,\\\"visitorApiTimeout\\\":2000,\\\"authoringScriptUrl\\\":\\\"//cdn.tt.omtrdc.net/cdn/target-vec.js\\\",\\\"overrideMboxEdgeServer\\\":false,\\\"selectorsPollingTimeout\\\":5000,\\\"defaultContentHiddenStyle\\\":\\\"visibility: hidden;\\\",\\\"defaultContentVisibleStyle\\\":\\\"visibility: visible;\\\",\\\"overrideMboxEdgeServerTimeout\\\":1860000,\\\"supplementalDataIdParamTimeout\\\":30}}\"\n            },\n            \"relationships\": {\n                \"libraries\": {\n                    \"links\": {\n                        \"related\": \"https://reactor.adobe.io/extensions/EX7c0a138c9e1245e8a2f2e35820a65a48/libraries\"\n                    }\n                },\n                \"revisions\": {\n                    \"links\": {\n                        \"related\": \"https://reactor.adobe.io/extensions/EX7c0a138c9e1245e8a2f2e35820a65a48/revisions\"\n                    }\n                },\n                \"notes\": {\n                    \"links\": {\n                        \"related\": \"https://reactor.adobe.io/extensions/EX7c0a138c9e1245e8a2f2e35820a65a48/notes\"\n                    }\n                },\n                \"property\": {\n                    \"links\": {\n                        \"related\": \"https://reactor.adobe.io/extensions/EX7c0a138c9e1245e8a2f2e35820a65a48/property\"\n                    },\n                    \"data\": {\n                        \"id\": \"PRe1347b49046a4ebab1bbea6c1dd2460e\",\n                        \"type\": \"properties\"\n                    }\n                },\n                \"origin\": {\n                    \"links\": {\n                        \"related\": \"https://reactor.adobe.io/extensions/EX7c0a138c9e1245e8a2f2e35820a65a48/origin\"\n                    },\n                    \"data\": {\n                        \"id\": \"EX7c0a138c9e1245e8a2f2e35820a65a48\",\n                        \"type\": \"extensions\"\n                    }\n                },\n                \"updated_with_extension_package\": {\n                    \"links\": {\n                        \"related\": \"https://reactor.adobe.io/extensions/EX7c0a138c9e1245e8a2f2e35820a65a48/updated_with_extension_package\"\n                    },\n                    \"data\": {\n                        \"id\": \"EP1b546118eb2742ad8d50d37a8325daca\",\n                        \"type\": \"extension_packages\"\n                    }\n                },\n                \"extension_package\": {\n                    \"links\": {\n                        \"related\": \"https://reactor.adobe.io/extensions/EX7c0a138c9e1245e8a2f2e35820a65a48/extension_package\"\n                    },\n                    \"data\": {\n                        \"id\": \"EP1b546118eb2742ad8d50d37a8325daca\",\n                        \"type\": \"extension_packages\"\n                    }\n                }\n            },\n            \"links\": {\n                \"property\": \"https://reactor.adobe.io/properties/PRe1347b49046a4ebab1bbea6c1dd2460e\",\n                \"origin\": \"https://reactor.adobe.io/extensions/EX7c0a138c9e1245e8a2f2e35820a65a48\",\n                \"self\": \"https://reactor.adobe.io/extensions/EX7c0a138c9e1245e8a2f2e35820a65a48\",\n                \"extension_package\": \"https://reactor.adobe.io/extension_packages/EP1b546118eb2742ad8d50d37a8325daca\",\n                \"latest_extension_package\": \"https://reactor.adobe.io/extension_packages/EP1b546118eb2742ad8d50d37a8325daca\"\n            },\n            \"meta\": {\n                \"latest_revision_number\": 1\n            }\n        }\n]\n\n```"
		},
		{
			"name": "Add Data Elements (datafile)",
			"item": [
				{
					"name": "Add Data Element",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var resp = JSON.parse(responseBody);",
									"",
									"var name = resp.data.attributes.name.replace(/\\s+/g, '-');",
									"var evKey = \"dataElementID_\"+name;",
									"var evValue = resp.data.id;",
									"",
									"pm.collectionVariables.set(evKey, evValue);",
									"",
									"pm.collectionVariables.set(\"dataElementName_\"+name,resp.data.attributes.name);",
									"",
									"pm.test(evKey + \" is set to \" + evValue, function () {",
									"  pm.response.to.have.status(201);",
									"  pm.expect(evValue).to.be.not.empty;",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var attr = pm.iterationData.get('attributes');",
									"",
									"// console.log(\"attribute: \"+JSON.stringify(attr));",
									"",
									"var ddi = attr.delegate_descriptor_id.split(':')",
									"var id = ddi[0];",
									"",
									"pm.variables.set(\"datafile-attribute\", JSON.stringify(attr));",
									"pm.variables.set(\"datafile-id\", pm.collectionVariables.get('extID_'+id));",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "bearer {{access_token}}",
								"type": "text"
							},
							{
								"key": "x-api-key",
								"value": "{{CLIENT_ID}}",
								"type": "text"
							},
							{
								"key": "X-Gw-Ims-Org-Id",
								"value": "{{ORG_ID}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/vnd.api+json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api+json;revision=1",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"data\": {\n    \"attributes\": {{datafile-attribute}},\n    \"relationships\": {\n      \"extension\": {\n        \"data\": {\n          \"id\": \"{{datafile-id}}\",\n          \"type\": \"extensions\"\n        }\n      }\n    },\n    \"type\": \"data_elements\"\n  }\n}"
						},
						"url": {
							"raw": "{{HOST}}/properties/{{propID}}/data_elements",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"properties",
								"{{propID}}",
								"data_elements"
							]
						},
						"description": "### Collection Variable Naming:\n\n*   `dataElementID_< name >` - ID of the data element created\n*   `dataElementName_< name >` - Name of the data element\n    \n\nWhere `< name >` is derived from the response: `data.attributes.name`"
					},
					"response": []
				}
			],
			"description": "This folder should be run as a collection runner with a datafile. The data file should be an array of data elements exported from another tag property:\n\n``` plaintext\nGET {{HOST}}properties/:propID/data_elements\n\n```\n\nExample **data-elements-datafile.json:**\n\n``` json\n[\n        {\n            \"id\": \"DEf66f8deed96a466e927591e13ac960fe\",\n            \"type\": \"data_elements\",\n            \"attributes\": {\n                \"created_at\": \"2022-02-04T19:55:50.984Z\",\n                \"deleted_at\": null,\n                \"dirty\": false,\n                \"enabled\": true,\n                \"name\": \"Authentication State\",\n                \"published\": true,\n                \"published_at\": null,\n                \"revision_number\": 0,\n                \"updated_at\": \"2022-02-04T21:18:52.718Z\",\n                \"clean_text\": false,\n                \"default_value\": null,\n                \"delegate_descriptor_id\": \"core::dataElements::custom-code\",\n                \"force_lower_case\": false,\n                \"review_status\": \"unsubmitted\",\n                \"storage_duration\": null,\n                \"settings\":\"{\\\"source\\\":\\\"if (digitalData \\\\&\\\\& digitalData.user[0].profile[0].attributes.loggedIn)\\\\n    return \\\\\\\"logged in\\\\\\\";\\\\nelse\\\\n    return \\\\\\\"logged out\\\\\\\";\\\\n\\\"}\"\n            },\n            \"relationships\": {\n                \"libraries\": {\n                    \"links\": {\n                        \"related\": \"https://reactor.adobe.io/data_elements/DEf66f8deed96a466e927591e13ac960fe/libraries\"\n                    }\n                },\n                \"revisions\": {\n                    \"links\": {\n                        \"related\": \"https://reactor.adobe.io/data_elements/DEf66f8deed96a466e927591e13ac960fe/revisions\"\n                    }\n                },\n                \"notes\": {\n                    \"links\": {\n                        \"related\": \"https://reactor.adobe.io/data_elements/DEf66f8deed96a466e927591e13ac960fe/notes\"\n                    }\n                },\n                \"property\": {\n                    \"links\": {\n                        \"related\": \"https://reactor.adobe.io/data_elements/DEf66f8deed96a466e927591e13ac960fe/property\"\n                    },\n                    \"data\": {\n                        \"id\": \"PRe1347b49046a4ebab1bbea6c1dd2460e\",\n                        \"type\": \"properties\"\n                    }\n                },\n                \"origin\": {\n                    \"links\": {\n                        \"related\": \"https://reactor.adobe.io/data_elements/DEf66f8deed96a466e927591e13ac960fe/origin\"\n                    },\n                    \"data\": {\n                        \"id\": \"DEf66f8deed96a466e927591e13ac960fe\",\n                        \"type\": \"data_elements\"\n                    }\n                },\n                \"extension\": {\n                    \"links\": {\n                        \"related\": \"https://reactor.adobe.io/data_elements/DEf66f8deed96a466e927591e13ac960fe/extension\"\n                    },\n                    \"data\": {\n                        \"id\": \"EX03d7f33dead9439db3f073528d164e99\",\n                        \"type\": \"extensions\"\n                    }\n                },\n                \"updated_with_extension_package\": {\n                    \"links\": {\n                        \"related\": \"https://reactor.adobe.io/data_elements/DEf66f8deed96a466e927591e13ac960fe/updated_with_extension_package\"\n                    },\n                    \"data\": {\n                        \"id\": \"EPd22815afd48447aa955be6a3a012e3b5\",\n                        \"type\": \"extension_packages\"\n                    }\n                },\n                \"updated_with_extension\": {\n                    \"links\": {\n                        \"related\": \"https://reactor.adobe.io/data_elements/DEf66f8deed96a466e927591e13ac960fe/updated_with_extension\"\n                    },\n                    \"data\": {\n                        \"id\": \"EXfd58bcffee0646459064cbb7de6b9754\",\n                        \"type\": \"extensions\"\n                    }\n                }\n            },\n            \"links\": {\n                \"property\": \"https://reactor.adobe.io/properties/PRe1347b49046a4ebab1bbea6c1dd2460e\",\n                \"origin\": \"https://reactor.adobe.io/data_elements/DEf66f8deed96a466e927591e13ac960fe\",\n                \"self\": \"https://reactor.adobe.io/data_elements/DEf66f8deed96a466e927591e13ac960fe\",\n                \"extension\": \"https://reactor.adobe.io/extensions/EX03d7f33dead9439db3f073528d164e99\"\n            },\n            \"meta\": {\n                \"latest_revision_number\": 2\n            }\n        },\n        {\n            \"id\": \"DE25f7777ce0564e4cadaed34fe97b0fbc\",\n            \"type\": \"data_elements\",\n            \"attributes\": {\n                \"created_at\": \"2022-02-04T19:17:15.107Z\",\n                \"deleted_at\": null,\n                \"dirty\": false,\n                \"enabled\": true,\n                \"name\": \"[Cart/wishlist] Product Id\",\n                \"published\": true,\n                \"published_at\": null,\n                \"revision_number\": 0,\n                \"updated_at\": \"2022-02-04T19:45:25.787Z\",\n                \"clean_text\": false,\n                \"default_value\": null,\n                \"delegate_descriptor_id\": \"core::dataElements::custom-code\",\n                \"force_lower_case\": false,\n                \"review_status\": \"unsubmitted\",\n                \"storage_duration\": null,\n                \"settings\":\"{\\\"source\\\":\\\"if(event \\\\&\\\\& \\\\n   event.message \\\\&\\\\& \\\\n   event.message.eventInfo \\\\&\\\\&\\\\n   event.message.eventInfo.hasOwnProperty('@id')){\\\\n      return event.message.eventInfo['@id'];\\\\n}\\\"}\"\n            },\n            \"relationships\": {\n                \"libraries\": {\n                    \"links\": {\n                        \"related\": \"https://reactor.adobe.io/data_elements/DE25f7777ce0564e4cadaed34fe97b0fbc/libraries\"\n                    }\n                },\n                \"revisions\": {\n                    \"links\": {\n                        \"related\": \"https://reactor.adobe.io/data_elements/DE25f7777ce0564e4cadaed34fe97b0fbc/revisions\"\n                    }\n                },\n                \"notes\": {\n                    \"links\": {\n                        \"related\": \"https://reactor.adobe.io/data_elements/DE25f7777ce0564e4cadaed34fe97b0fbc/notes\"\n                    }\n                },\n                \"property\": {\n                    \"links\": {\n                        \"related\": \"https://reactor.adobe.io/data_elements/DE25f7777ce0564e4cadaed34fe97b0fbc/property\"\n                    },\n                    \"data\": {\n                        \"id\": \"PRe1347b49046a4ebab1bbea6c1dd2460e\",\n                        \"type\": \"properties\"\n                    }\n                },\n                \"origin\": {\n                    \"links\": {\n                        \"related\": \"https://reactor.adobe.io/data_elements/DE25f7777ce0564e4cadaed34fe97b0fbc/origin\"\n                    },\n                    \"data\": {\n                        \"id\": \"DE25f7777ce0564e4cadaed34fe97b0fbc\",\n                        \"type\": \"data_elements\"\n                    }\n                },\n                \"extension\": {\n                    \"links\": {\n                        \"related\": \"https://reactor.adobe.io/data_elements/DE25f7777ce0564e4cadaed34fe97b0fbc/extension\"\n                    },\n                    \"data\": {\n                        \"id\": \"EX03d7f33dead9439db3f073528d164e99\",\n                        \"type\": \"extensions\"\n                    }\n                },\n                \"updated_with_extension_package\": {\n                    \"links\": {\n                        \"related\": \"https://reactor.adobe.io/data_elements/DE25f7777ce0564e4cadaed34fe97b0fbc/updated_with_extension_package\"\n                    },\n                    \"data\": {\n                        \"id\": \"EPd22815afd48447aa955be6a3a012e3b5\",\n                        \"type\": \"extension_packages\"\n                    }\n                },\n                \"updated_with_extension\": {\n                    \"links\": {\n                        \"related\": \"https://reactor.adobe.io/data_elements/DE25f7777ce0564e4cadaed34fe97b0fbc/updated_with_extension\"\n                    },\n                    \"data\": {\n                        \"id\": \"EXfd58bcffee0646459064cbb7de6b9754\",\n                        \"type\": \"extensions\"\n                    }\n                }\n            },\n            \"links\": {\n                \"property\": \"https://reactor.adobe.io/properties/PRe1347b49046a4ebab1bbea6c1dd2460e\",\n                \"origin\": \"https://reactor.adobe.io/data_elements/DE25f7777ce0564e4cadaed34fe97b0fbc\",\n                \"self\": \"https://reactor.adobe.io/data_elements/DE25f7777ce0564e4cadaed34fe97b0fbc\",\n                \"extension\": \"https://reactor.adobe.io/extensions/EX03d7f33dead9439db3f073528d164e99\"\n            },\n            \"meta\": {\n                \"latest_revision_number\": 3\n            }\n        }\n]\n\n```"
		},
		{
			"name": "Add rule and cmps (datafile & pre-request)",
			"item": [
				{
					"name": "Run Add Rule once",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Skip \"Add Rule\" if it's not the first iteration",
									"if(pm.info.iteration != 0){",
									"    postman.setNextRequest(\"Add Rule Component\");",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "bearer {{access_token}}",
								"type": "text"
							},
							{
								"key": "x-api-key",
								"value": "{{CLIENT_ID}}",
								"type": "text"
							},
							{
								"key": "X-Gw-Ims-Org-Id",
								"value": "{{ORG_ID}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/vnd.api+json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api+json;revision=1",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{HOST}}/properties/{{propID}}",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"properties",
								"{{propID}}"
							]
						},
						"description": "This is a filler request that allows the Add Rule request to only run on the first iteration of the datafile, ensuring all rule components in the datafile are added to the same rule."
					},
					"response": []
				},
				{
					"name": "Add Rule",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var resp = JSON.parse(responseBody);",
									"",
									"//evKey and evValue are the only values that should be changed in this script. Everything else is boilerplate.",
									"var name = resp.data.attributes.name.replace(/\\s+/g, '-');",
									"var evKey = \"ruleID_\"+name;",
									"var evValue = resp.data.id;",
									"",
									"pm.collectionVariables.set(evKey, evValue);",
									"console.log(\"Rule ID: \"+evValue+ \" for \"+name);",
									"",
									"pm.variables.set(\"currentRule\",evValue);",
									"",
									"pm.test(evKey + \" is set to \" + evValue, function () {",
									"  pm.response.to.have.status(201);",
									"  pm.expect(evValue).to.be.not.empty;",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "bearer {{access_token}}",
								"type": "text"
							},
							{
								"key": "x-api-key",
								"value": "{{CLIENT_ID}}",
								"type": "text"
							},
							{
								"key": "X-Gw-Ims-Org-Id",
								"value": "{{ORG_ID}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/vnd.api+json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api+json;revision=1",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"data\": {\n    \"attributes\": {\n                \"enabled\": true,\n                \"name\": \"{{ruleName}}\"\n            },\n    \"type\": \"rules\"\n  }\n}"
						},
						"url": {
							"raw": "{{HOST}}/properties/{{propID}}/rules",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"properties",
								"{{propID}}",
								"rules"
							]
						},
						"description": "Creates a new rule based on the ruleName from the Pre-request script of this folder. This is only run once per datafile to ensure all rule components are added to the same rule.\n\n### Collection Variable Naming:\n\n*   `ruleID_< name >` - ID of the rule created\n    \n\nWhere `< name >` is derived from the response: `data.attributes.name`"
					},
					"response": []
				},
				{
					"name": "Add Rule Component",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var attr = pm.iterationData.get('attributes');",
									"",
									"// console.log(\"attribute: \"+JSON.stringify(attr));",
									"",
									"var ddi = attr.delegate_descriptor_id.split(':')",
									"var id = ddi[0];",
									"",
									"pm.variables.set(\"datafile-attribute\", JSON.stringify(attr));",
									"pm.variables.set(\"datafile-id\", pm.collectionVariables.get('extID_'+id));",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var resp = JSON.parse(responseBody);",
									"",
									"//evKey and evValue are the only values that should be changed in this script. Everything else is boilerplate.",
									"var name = resp.data.attributes.name;",
									"var currentRule = pm.variables.get(\"currentRule\");",
									"",
									"pm.test(name + \" component added to \" + currentRule + \" rule\", function () {",
									"  pm.response.to.have.status(201);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "bearer {{access_token}}",
								"type": "text"
							},
							{
								"key": "x-api-key",
								"value": "{{CLIENT_ID}}",
								"type": "text"
							},
							{
								"key": "X-Gw-Ims-Org-Id",
								"value": "{{ORG_ID}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/vnd.api+json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api+json;revision=1",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"data\": {\n    \"attributes\": {{datafile-attribute}},\n    \"relationships\": {\n      \"extension\": {\n        \"data\": {\n          \"id\": \"{{datafile-id}}\",\n          \"type\": \"extensions\"\n        }\n      },\n      \"rules\": {\n        \"data\": [\n          {\n            \"id\": \"{{currentRule}}\",\n            \"type\": \"rules\"\n          }\n        ]\n      }\n    },\n    \"type\": \"rule_components\"\n  }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{HOST}}/properties/{{propID}}/rule_components",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"properties",
								"{{propID}}",
								"rule_components"
							]
						},
						"description": "Adds the rule component to the specified rule from the ruleName. Rule components aren't added to the collection variables since they are auto-added to the library when the rule ID is added."
					},
					"response": []
				}
			],
			"description": "Before running this folder, the **ruleName** needs to be set in the **Pre-request script.** The **ruleName** indicates the rule that all rule components in the datafile will go under. You can quickly get the names of all the rules from another tag property:\n\n```\n{{HOST}}properties/:propID/rules\n\n```\n\nOnce the **ruleName** has been set, this folder should be run as a collection runner with a datafile. The datafile should be an array of rule components exported from another tag property:\n\n``` plaintext\nGET {{HOST}}/rules/:currentRule/rule_components\n\n```\n\nExample **rulecmp-datafile.json:**\n\n``` json\n[\n        {\n            \"id\": \"RC6046283da8c5477c9dc07f2c326cb52b\",\n            \"type\": \"rule_components\",\n            \"attributes\": {\n                \"created_at\": \"2022-02-04T19:59:58.449Z\",\n                \"delegate_descriptor_id\": \"adobe-mcid::actions::set-customer-ids\",\n                \"deleted_at\": null,\n                \"dirty\": false,\n                \"name\": \"Experience Cloud ID Service - Set Customer IDs\",\n                \"negate\": false,\n                \"order\": 0,\n                \"rule_order\": 50.0,\n                \"timeout\": 2000,\n                \"delay_next\": true,\n                \"published\": true,\n                \"published_at\": null,\n                \"revision_number\": 0,\n                \"updated_at\": \"2022-02-04T19:59:58.449Z\",\n                \"settings\": \"{\\\"customerIds\\\":[{\\\"value\\\":\\\"%Email (hashed)%\\\",\\\"hashType\\\":\\\"\\\",\\\"authState\\\":1,\\\"integrationCode\\\":\\\"crm_id\\\"}]}\"\n            },\n            \"relationships\": {\n                \"updated_with_extension_package\": {\n                    \"links\": {\n                        \"related\": \"https://reactor.adobe.io/rule_components/RC6046283da8c5477c9dc07f2c326cb52b/updated_with_extension_package\"\n                    },\n                    \"data\": {\n                        \"id\": \"EP4413121ff4ce4a49869b12b0ea80c748\",\n                        \"type\": \"extension_packages\"\n                    }\n                },\n                \"updated_with_extension\": {\n                    \"links\": {\n                        \"related\": \"https://reactor.adobe.io/rule_components/RC6046283da8c5477c9dc07f2c326cb52b/updated_with_extension\"\n                    },\n                    \"data\": {\n                        \"id\": \"EX58ee603a00bf4d598954b78785544e54\",\n                        \"type\": \"extensions\"\n                    }\n                },\n                \"extension\": {\n                    \"links\": {\n                        \"related\": \"https://reactor.adobe.io/rule_components/RC6046283da8c5477c9dc07f2c326cb52b/extension\"\n                    },\n                    \"data\": {\n                        \"id\": \"EX3c928e2340184002be0bbe0ab917f007\",\n                        \"type\": \"extensions\"\n                    }\n                },\n                \"notes\": {\n                    \"links\": {\n                        \"related\": \"https://reactor.adobe.io/rule_components/RC6046283da8c5477c9dc07f2c326cb52b/notes\"\n                    }\n                },\n                \"origin\": {\n                    \"links\": {\n                        \"related\": \"https://reactor.adobe.io/rule_components/RC6046283da8c5477c9dc07f2c326cb52b/origin\"\n                    },\n                    \"data\": {\n                        \"id\": \"RC6046283da8c5477c9dc07f2c326cb52b\",\n                        \"type\": \"rule_components\"\n                    }\n                },\n                \"property\": {\n                    \"links\": {\n                        \"related\": \"https://reactor.adobe.io/properties/PRe1347b49046a4ebab1bbea6c1dd2460e\"\n                    },\n                    \"data\": {\n                        \"id\": \"PRe1347b49046a4ebab1bbea6c1dd2460e\",\n                        \"type\": \"properties\"\n                    }\n                },\n                \"rules\": {\n                    \"links\": {\n                        \"related\": \"https://reactor.adobe.io/rule_components/RC6046283da8c5477c9dc07f2c326cb52b/rules\"\n                    }\n                }\n            },\n            \"links\": {\n                \"extension\": \"https://reactor.adobe.io/extensions/EX3c928e2340184002be0bbe0ab917f007\",\n                \"origin\": \"https://reactor.adobe.io/rule_components/RC6046283da8c5477c9dc07f2c326cb52b\",\n                \"rules\": \"https://reactor.adobe.io/rule_components/RC6046283da8c5477c9dc07f2c326cb52b/rules\",\n                \"self\": \"https://reactor.adobe.io/rule_components/RC6046283da8c5477c9dc07f2c326cb52b\"\n            },\n            \"meta\": {\n                \"latest_revision_number\": 2\n            }\n        },\n        {\n            \"id\": \"RC80a7546831fc4d7884bdd661f7b78adc\",\n            \"type\": \"rule_components\",\n            \"attributes\": {\n                \"created_at\": \"2022-02-04T19:59:58.437Z\",\n                \"delegate_descriptor_id\": \"core::events::library-loaded\",\n                \"deleted_at\": null,\n                \"dirty\": false,\n                \"name\": \"Core - Library Loaded (Page Top)\",\n                \"negate\": false,\n                \"order\": 0,\n                \"rule_order\": 10.0,\n                \"timeout\": 2000,\n                \"delay_next\": true,\n                \"published\": true,\n                \"published_at\": null,\n                \"revision_number\": 0,\n                \"updated_at\": \"2022-02-04T19:59:58.437Z\",\n                \"settings\": \"{}\"\n            },\n            \"relationships\": {\n                \"updated_with_extension_package\": {\n                    \"links\": {\n                        \"related\": \"https://reactor.adobe.io/rule_components/RC80a7546831fc4d7884bdd661f7b78adc/updated_with_extension_package\"\n                    },\n                    \"data\": {\n                        \"id\": \"EPd22815afd48447aa955be6a3a012e3b5\",\n                        \"type\": \"extension_packages\"\n                    }\n                },\n                \"updated_with_extension\": {\n                    \"links\": {\n                        \"related\": \"https://reactor.adobe.io/rule_components/RC80a7546831fc4d7884bdd661f7b78adc/updated_with_extension\"\n                    },\n                    \"data\": {\n                        \"id\": \"EXfd58bcffee0646459064cbb7de6b9754\",\n                        \"type\": \"extensions\"\n                    }\n                },\n                \"extension\": {\n                    \"links\": {\n                        \"related\": \"https://reactor.adobe.io/rule_components/RC80a7546831fc4d7884bdd661f7b78adc/extension\"\n                    },\n                    \"data\": {\n                        \"id\": \"EX03d7f33dead9439db3f073528d164e99\",\n                        \"type\": \"extensions\"\n                    }\n                },\n                \"notes\": {\n                    \"links\": {\n                        \"related\": \"https://reactor.adobe.io/rule_components/RC80a7546831fc4d7884bdd661f7b78adc/notes\"\n                    }\n                },\n                \"origin\": {\n                    \"links\": {\n                        \"related\": \"https://reactor.adobe.io/rule_components/RC80a7546831fc4d7884bdd661f7b78adc/origin\"\n                    },\n                    \"data\": {\n                        \"id\": \"RC80a7546831fc4d7884bdd661f7b78adc\",\n                        \"type\": \"rule_components\"\n                    }\n                },\n                \"property\": {\n                    \"links\": {\n                        \"related\": \"https://reactor.adobe.io/properties/PRe1347b49046a4ebab1bbea6c1dd2460e\"\n                    },\n                    \"data\": {\n                        \"id\": \"PRe1347b49046a4ebab1bbea6c1dd2460e\",\n                        \"type\": \"properties\"\n                    }\n                },\n                \"rules\": {\n                    \"links\": {\n                        \"related\": \"https://reactor.adobe.io/rule_components/RC80a7546831fc4d7884bdd661f7b78adc/rules\"\n                    }\n                }\n            },\n            \"links\": {\n                \"extension\": \"https://reactor.adobe.io/extensions/EX03d7f33dead9439db3f073528d164e99\",\n                \"origin\": \"https://reactor.adobe.io/rule_components/RC80a7546831fc4d7884bdd661f7b78adc\",\n                \"rules\": \"https://reactor.adobe.io/rule_components/RC80a7546831fc4d7884bdd661f7b78adc/rules\",\n                \"self\": \"https://reactor.adobe.io/rule_components/RC80a7546831fc4d7884bdd661f7b78adc\"\n            },\n            \"meta\": {\n                \"latest_revision_number\": 2\n            }\n        },\n        {\n            \"id\": \"RC1b9be42691e6482c86bb8da04e8a8fe6\",\n            \"type\": \"rule_components\",\n            \"attributes\": {\n                \"created_at\": \"2022-02-04T19:59:58.431Z\",\n                \"delegate_descriptor_id\": \"core::conditions::value-comparison\",\n                \"deleted_at\": null,\n                \"dirty\": false,\n                \"name\": \"Core - Value Comparison\",\n                \"negate\": false,\n                \"order\": 0,\n                \"rule_order\": 50.0,\n                \"timeout\": 2000,\n                \"delay_next\": true,\n                \"published\": true,\n                \"published_at\": null,\n                \"revision_number\": 0,\n                \"updated_at\": \"2022-02-04T19:59:58.431Z\",\n                \"settings\": \"{\\\"comparison\\\":{\\\"operator\\\":\\\"equals\\\"},\\\"leftOperand\\\":\\\"%Authentication State%\\\",\\\"rightOperand\\\":\\\"logged in\\\"}\"\n            },\n            \"relationships\": {\n                \"updated_with_extension_package\": {\n                    \"links\": {\n                        \"related\": \"https://reactor.adobe.io/rule_components/RC1b9be42691e6482c86bb8da04e8a8fe6/updated_with_extension_package\"\n                    },\n                    \"data\": {\n                        \"id\": \"EPd22815afd48447aa955be6a3a012e3b5\",\n                        \"type\": \"extension_packages\"\n                    }\n                },\n                \"updated_with_extension\": {\n                    \"links\": {\n                        \"related\": \"https://reactor.adobe.io/rule_components/RC1b9be42691e6482c86bb8da04e8a8fe6/updated_with_extension\"\n                    },\n                    \"data\": {\n                        \"id\": \"EXfd58bcffee0646459064cbb7de6b9754\",\n                        \"type\": \"extensions\"\n                    }\n                },\n                \"extension\": {\n                    \"links\": {\n                        \"related\": \"https://reactor.adobe.io/rule_components/RC1b9be42691e6482c86bb8da04e8a8fe6/extension\"\n                    },\n                    \"data\": {\n                        \"id\": \"EX03d7f33dead9439db3f073528d164e99\",\n                        \"type\": \"extensions\"\n                    }\n                },\n                \"notes\": {\n                    \"links\": {\n                        \"related\": \"https://reactor.adobe.io/rule_components/RC1b9be42691e6482c86bb8da04e8a8fe6/notes\"\n                    }\n                },\n                \"origin\": {\n                    \"links\": {\n                        \"related\": \"https://reactor.adobe.io/rule_components/RC1b9be42691e6482c86bb8da04e8a8fe6/origin\"\n                    },\n                    \"data\": {\n                        \"id\": \"RC1b9be42691e6482c86bb8da04e8a8fe6\",\n                        \"type\": \"rule_components\"\n                    }\n                },\n                \"property\": {\n                    \"links\": {\n                        \"related\": \"https://reactor.adobe.io/properties/PRe1347b49046a4ebab1bbea6c1dd2460e\"\n                    },\n                    \"data\": {\n                        \"id\": \"PRe1347b49046a4ebab1bbea6c1dd2460e\",\n                        \"type\": \"properties\"\n                    }\n                },\n                \"rules\": {\n                    \"links\": {\n                        \"related\": \"https://reactor.adobe.io/rule_components/RC1b9be42691e6482c86bb8da04e8a8fe6/rules\"\n                    }\n                }\n            },\n            \"links\": {\n                \"extension\": \"https://reactor.adobe.io/extensions/EX03d7f33dead9439db3f073528d164e99\",\n                \"origin\": \"https://reactor.adobe.io/rule_components/RC1b9be42691e6482c86bb8da04e8a8fe6\",\n                \"rules\": \"https://reactor.adobe.io/rule_components/RC1b9be42691e6482c86bb8da04e8a8fe6/rules\",\n                \"self\": \"https://reactor.adobe.io/rule_components/RC1b9be42691e6482c86bb8da04e8a8fe6\"\n            },\n            \"meta\": {\n                \"latest_revision_number\": 2\n            }\n        }\n    ]\n\n```",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							"pm.variables.set(\"ruleName\",\"[10] ECID Authentication\");"
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Publish Library (READONLY)",
			"item": [
				{
					"name": "Create Library",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var resp = JSON.parse(responseBody);",
									"",
									"//evKey and evValue are the only values that should be changed in this script. Everything else is boilerplate.",
									"var evKey = \"libraryID\";",
									"var evValue = resp.data.id;",
									"",
									"pm.collectionVariables.set(evKey, evValue);",
									"",
									"pm.test(\"Library with ID: \"+evValue+\" has been created\", function () {",
									"  pm.response.to.have.status(201);",
									"  pm.expect(evValue).to.be.not.empty;",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var data_data_elements = [];",
									"var data_rules = [];",
									"var data_extensions = [];",
									"// envVariables = pm.environment.toObject();",
									"envVariables = pm.collectionVariables.toObject();",
									"",
									"//Find all data elements, rules, and extensions in this property so they can be added to the Library",
									"for (var key in envVariables){",
									"    if(envVariables.hasOwnProperty(key)){",
									"        if(key.includes(\"dataElementID\") && envVariables[key] != \"\"){",
									"                var dEObj_data = new Object();",
									"                dEObj_data.id = envVariables[key];",
									"                dEObj_data.type = \"data_elements\";",
									"                dEObj_data.meta = {};",
									"                dEObj_data.meta.action = \"revise\";",
									"                data_data_elements.push(JSON.stringify(dEObj_data));",
									"        }",
									"        if(key.includes(\"ruleID\") && envVariables[key] != \"\"){",
									"                var ruleObj_data = new Object();",
									"                ruleObj_data.id = envVariables[key];",
									"                ruleObj_data.type = \"rules\";",
									"                ruleObj_data.meta = {};",
									"                ruleObj_data.meta.action = \"revise\";",
									"                data_rules.push(JSON.stringify(ruleObj_data));",
									"        }",
									"        if(key.includes(\"extID\") && envVariables[key] != \"\"){",
									"                var extObj_data = new Object();",
									"                extObj_data.id = envVariables[key];",
									"                extObj_data.type = \"extensions\";",
									"                extObj_data.meta = {};",
									"                extObj_data.meta.action = \"revise\";",
									"                data_extensions.push(JSON.stringify(extObj_data));",
									"        }",
									"    }",
									"}",
									"//If there are data elements, create a JSON entry for them",
									"var data_elementsObj = \"\";",
									"if(data_data_elements.length != 0){",
									"    data_elementsObj = `\"data_elements\": {",
									"          \"data\": [`",
									"            +data_data_elements+",
									"          `]",
									"        },`;",
									"}",
									"//If there are rules, create a JSON entry for them",
									"var rulesObj = \"\";",
									"if(data_rules.length != 0){",
									"    rulesObj = `\"rules\": {",
									"          \"data\": [`",
									"            +data_rules+",
									"          `]",
									"        },`;",
									"}",
									"//If there are extensions, create a JSON entry for them",
									"var extensionsObj = \"\";",
									"if(data_extensions.length != 0){",
									"    extensionsObj = `\"extensions\": {",
									"          \"data\": [`",
									"            +data_extensions+",
									"          `]",
									"        },`;",
									"}",
									"pm.globals.set(\"data_data_elements\", data_elementsObj);",
									"pm.globals.set(\"data_rules\", rulesObj);",
									"pm.globals.set(\"data_extensions\", extensionsObj);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "bearer {{access_token}}",
								"type": "text"
							},
							{
								"key": "x-api-key",
								"value": "{{CLIENT_ID}}",
								"type": "text"
							},
							{
								"key": "X-Gw-Ims-Org-Id",
								"value": "{{ORG_ID}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/vnd.api+json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api+json;revision=1",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"data\": {\n        \"attributes\": {\n            \"name\": \"My Library\"\n        },\n        \"type\": \"libraries\",\n      \"relationships\": {\n        {{data_data_elements}}\n        {{data_rules}}\n        {{data_extensions}}\n        \"environment\": {\n          \"data\": { \n            \"type\": \"environments\", \n            \"id\": \"{{envID_Dev}}\" \n          }\n        }\n      }\n  }\n}"
						},
						"url": {
							"raw": "{{HOST}}/properties/{{propID}}/libraries",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"properties",
								"{{propID}}",
								"libraries"
							]
						},
						"description": "Finds all Collection variables that start with:\n\n*   extID\n*   dataElementID\n*   ruleID\n    \n\nand adds the IDs to the Library to be built and published to production\n\n### Collection Variable Naming:\n\n*   `libraryID` - ID of the library to be built"
					},
					"response": []
				},
				{
					"name": "Build",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"setTimeout(function(){}, 10000);",
									"",
									"pm.test(\"Library is built in dev\", function () {",
									"  pm.response.to.have.status(201);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "bearer {{access_token}}",
								"type": "text"
							},
							{
								"key": "x-api-key",
								"value": "{{CLIENT_ID}}",
								"type": "text"
							},
							{
								"key": "X-Gw-Ims-Org-Id",
								"value": "{{ORG_ID}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/vnd.api+json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api+json;revision=1",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{HOST}}/libraries/{{libraryID}}/builds",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"libraries",
								"{{libraryID}}",
								"builds"
							]
						},
						"description": "Builds the library based on libraryID"
					},
					"response": []
				},
				{
					"name": "Submit",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Library is submitted for approval\", function () {",
									"  pm.response.to.have.status(200);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"value": "bearer {{access_token}}",
								"type": "text"
							},
							{
								"key": "x-api-key",
								"value": "{{CLIENT_ID}}",
								"type": "text"
							},
							{
								"key": "X-Gw-Ims-Org-Id",
								"value": "{{ORG_ID}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/vnd.api+json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api+json;revision=1",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"data\": {\n        \"id\": \"{{libraryID}}\",\n        \"type\": \"libraries\",\n        \"meta\": {\n            \"action\": \"submit\"\n        }\n    }\n}"
						},
						"url": {
							"raw": "{{HOST}}/libraries/{{libraryID}}",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"libraries",
								"{{libraryID}}"
							]
						},
						"description": "Submits the library based on libraryID"
					},
					"response": []
				},
				{
					"name": "Approve",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Library is approved for production\", function () {",
									"  pm.response.to.have.status(200);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"value": "bearer {{access_token}}",
								"type": "text"
							},
							{
								"key": "x-api-key",
								"value": "{{CLIENT_ID}}",
								"type": "text"
							},
							{
								"key": "X-Gw-Ims-Org-Id",
								"value": "{{ORG_ID}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/vnd.api+json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api+json;revision=1",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"data\": {\n        \"id\": \"{{libraryID}}\",\n        \"type\": \"libraries\",\n        \"meta\": {\n            \"action\": \"approve\"\n        }\n    }\n}"
						},
						"url": {
							"raw": "{{HOST}}/libraries/{{libraryID}}",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"libraries",
								"{{libraryID}}"
							]
						},
						"description": "Approves the library based on libraryID"
					},
					"response": []
				},
				{
					"name": "Add to prod Environment",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Library is added to production\", function () {",
									"  pm.response.to.have.status(200);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "bearer {{access_token}}",
								"type": "text"
							},
							{
								"key": "x-api-key",
								"value": "{{CLIENT_ID}}",
								"type": "text"
							},
							{
								"key": "X-Gw-Ims-Org-Id",
								"value": "{{ORG_ID}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/vnd.api+json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api+json;revision=1",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"data\": {\n        \"id\": \"{{envID_Prod}}\",\n        \"type\": \"environments\"\n    }\n}"
						},
						"url": {
							"raw": "{{HOST}}/libraries/{{libraryID}}/relationships/environment",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"libraries",
								"{{libraryID}}",
								"relationships",
								"environment"
							]
						},
						"description": "Adds the library to the production environment based on library ID"
					},
					"response": []
				},
				{
					"name": "Publish",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Library is published\", function () {",
									"  pm.response.to.have.status(201);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "bearer {{access_token}}",
								"type": "text"
							},
							{
								"key": "x-api-key",
								"value": "{{CLIENT_ID}}",
								"type": "text"
							},
							{
								"key": "X-Gw-Ims-Org-Id",
								"value": "{{ORG_ID}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/vnd.api+json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api+json;revision=1",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{HOST}}/libraries/{{libraryID}}/builds",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"libraries",
								"{{libraryID}}",
								"builds"
							]
						},
						"description": "Publishes the production library"
					},
					"response": []
				}
			],
			"description": "This folder should be run as a collection runner. No other input needed."
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "companyID",
			"value": ""
		},
		{
			"key": "propID",
			"value": ""
		},
		{
			"key": "hostID",
			"value": ""
		},
		{
			"key": "envDev_script",
			"value": ""
		},
		{
			"key": "envID_Dev",
			"value": ""
		},
		{
			"key": "envStage_script",
			"value": ""
		},
		{
			"key": "envID_Stage",
			"value": ""
		},
		{
			"key": "envProd_script",
			"value": ""
		},
		{
			"key": "envID_Prod",
			"value": ""
		},
		{
			"key": "extPackageID_core",
			"value": ""
		},
		{
			"key": "extPackageID_adobe-mcid",
			"value": ""
		},
		{
			"key": "extPackageID_adobe-target-v2",
			"value": ""
		},
		{
			"key": "extPackageID_adobe-analytics",
			"value": ""
		},
		{
			"key": "extPackageID_gcoe-adobe-client-data-layer",
			"value": ""
		},
		{
			"key": "extPackageID_adobe-alloy",
			"value": ""
		},
		{
			"key": "extPackageID_mapping-table",
			"value": ""
		},
		{
			"key": "extPackageID_adobe-target",
			"value": ""
		},
		{
			"key": "extPackageID_adobe-contexthub",
			"value": ""
		},
		{
			"key": "extID_core",
			"value": ""
		},
		{
			"key": "extID_adobe-mcid",
			"value": ""
		},
		{
			"key": "extID_adobe-analytics",
			"value": ""
		},
		{
			"key": "ruleID_[10]-ECID-Authentication",
			"value": ""
		},
		{
			"key": "extID_adobe-target-v2",
			"value": ""
		},
		{
			"key": "extID_gcoe-adobe-client-data-layer",
			"value": ""
		},
		{
			"key": "extID_mapping-table",
			"value": ""
		},
		{
			"key": "dataElementID_Authentication-State",
			"value": ""
		},
		{
			"key": "dataElementName_Authentication-State",
			"value": ""
		},
		{
			"key": "dataElementID_[Cart/wishlist]-Product-Id",
			"value": ""
		},
		{
			"key": "dataElementName_[Cart/wishlist]-Product-Id",
			"value": ""
		},
		{
			"key": "dataElementID_[Cart/wishlist]-Product-quantity",
			"value": ""
		},
		{
			"key": "dataElementName_[Cart/wishlist]-Product-quantity",
			"value": ""
		},
		{
			"key": "dataElementID_[Cart/wishlist]-SKU",
			"value": ""
		},
		{
			"key": "dataElementName_[Cart/wishlist]-SKU",
			"value": ""
		},
		{
			"key": "dataElementID_Email-(hashed)",
			"value": ""
		},
		{
			"key": "dataElementName_Email-(hashed)",
			"value": ""
		},
		{
			"key": "dataElementID_eventMappingTable",
			"value": ""
		},
		{
			"key": "dataElementName_eventMappingTable",
			"value": ""
		},
		{
			"key": "dataElementID_Page-Path",
			"value": ""
		},
		{
			"key": "dataElementName_Page-Path",
			"value": ""
		},
		{
			"key": "dataElementID_Page-resourceType",
			"value": ""
		},
		{
			"key": "dataElementName_Page-resourceType",
			"value": ""
		},
		{
			"key": "dataElementID_Page-Template",
			"value": ""
		},
		{
			"key": "dataElementName_Page-Template",
			"value": ""
		},
		{
			"key": "dataElementID_Page-Title",
			"value": ""
		},
		{
			"key": "dataElementName_Page-Title",
			"value": ""
		},
		{
			"key": "dataElementID_Product-Name",
			"value": ""
		},
		{
			"key": "dataElementName_Product-Name",
			"value": ""
		},
		{
			"key": "dataElementID_Product-Path",
			"value": ""
		},
		{
			"key": "dataElementName_Product-Path",
			"value": ""
		},
		{
			"key": "dataElementID_Product-SKU",
			"value": ""
		},
		{
			"key": "dataElementName_Product-SKU",
			"value": ""
		},
		{
			"key": "dataElementID_ShopperContext-Email",
			"value": ""
		},
		{
			"key": "dataElementName_ShopperContext-Email",
			"value": ""
		},
		{
			"key": "dataElementID_ShopperContext-Shopper-Id",
			"value": ""
		},
		{
			"key": "dataElementName_ShopperContext-Shopper-Id",
			"value": ""
		}
	]
}